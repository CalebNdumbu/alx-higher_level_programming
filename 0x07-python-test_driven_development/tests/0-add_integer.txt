Test cases for 0-add_integer module
===================================
Takes two integers or floats and return their sum

Importing the function:
    >>>add_integer = __import__('0-add_integer').add_integer

Add two positive integers
    >>> add_integer(2, 1)
    3

Add a positive and negative integer
    >>> add_integer(5, -4)
    1

Add two negative integers
    >>> add_integer(-7, -4)
    -11

Add two integers with the second being the same as default of B (98)
    >>> add_integer(4)
    102

Add a positive float and a positive integer
    >>> add_integer(2.5, 3)
    5

Add a float to the default of being
    >>> add_integer(2.5)
    100

Add a positive float and a negative integer
    >>> add_integer(-10.5, -2)
    -12

Add two float numbers
    >>> add_integer(5.6, 6.8)
    11

Add an integerand a string
    >>> add_integer(4, "Caleb")
	Traceback (most recent call last):
		...
	TypeError: b must be an integer

Passing no arguments
    >>> add_integer(None)
    Traceback (most recent call last):
	      ...
    TypeError: a must be an integer

Add a letter and a number
    >>> add_integer('d', 2)
    Traceback (most recent call last):
	      ...
    TypeError: a must be an integer

Add two letters
    >>> add_integer('a', 'b')
    Traceback (most recent call last):
	      ...
    TypeError: a must be an integer

Adding a float and a string (invalid scenario):
    >>> add_integer(2.5, "3")
    Traceback (most recent call last):
        ...
    TypeError: b must be an integer

Adding a string and a float (invalid scenario):
    >>> add_integer("2", 3.5)
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer

Add a tuple
    >>> add_integer((3,4))
    Traceback (most recent call last):
	      ...
    TypeError: a must be an integer

Add a number and a list
    >>> add_integer([], 5)
    Traceback (most recent call last):
	      ...
    TypeError: a must be an integer
   
Pass one string
    >>> add_integer("Hello")
    Traceback (most recent call last):
	      ...
    TypeError: a must be an integer

OverflowError Scenario 1: Adding float infinity and an integer
    >>> add_integer(float('inf'), 0)
    Traceback (most recent call last):
    	      ...
    OverflowError: cannot convert float infinity to integer 

OverflowError Scenario 2: Adding float infinity and float negative infinity
    >>> add_integer(float('inf'), float('-inf'))
    Traceback (most recent call last):
    	      ...
    OverflowError: cannot convert float infinity to integer

Not a Number case 1
    >>> add_integer(0, float('nan))
    Traceback (most recent call last):
    	      ...
    ValueError: cannot convert float NaN to integer
   
Not a Number case 2
    >>> add_integer(float('nan))
    Traceback (most recent call last):
    	      ...
    ValueError: cannot convert float NaN to integer   